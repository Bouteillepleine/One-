name: Kernel Build (LTO Optimized)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  BRANCH: "android14-6.1"
  KERNEL_VERSION: "6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Free Disk Space (Safe)
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/local/share/boost

      - name: Setup Build Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ccache cmake curl flex \
            git libdw-dev libelf-dev libssl-dev lld llvm \
            ninja-build python3-dev python3-pip rsync unzip \
            wget zip zlib1g-dev

      - name: Configure ccache
        uses: hendrikmuhs/ccache-action@v1.3
        with:
          key: kernel-build-${{ env.KERNEL_VERSION }}
          max-size: 4G

      - name: Setup Python Environment
        run: |
          python3 -m pip install --upgrade pip wheel
          pip3 install --user gitpython xmltodict

      - name: Configure Repo Tool
        run: |
          mkdir -p ~/.bin
          curl -sL https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH

      - name: Initialize Build Directory
        id: build-dir
        run: |
          build_dir="${ROOT_DIR_PREFIX}-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
          echo "BUILD_DIR=${build_dir}" >> $GITHUB_ENV
          mkdir -p "builds/${build_dir}"
          echo "::set-output name=path::builds/${build_dir}"

      - name: Clone Dependencies
        working-directory: ${{ steps.build-dir.outputs.path }}
        env:
          REPO_BRANCH: "gki-android14-6.1"
        run: |
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3
          git clone -b $REPO_BRANCH --single-branch https://gitlab.com/simonpunk/susfs4ksu.git
          git clone --filter=blob:none https://github.com/WildPlusKernel/kernel_patches.git

      - name: Initialize Kernel Source
        working-directory: ${{ steps.build-dir.outputs.path }}
        run: |
          mkdir -p kernel_platform/oneplus13r_v
          cd kernel_platform/oneplus13r_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b oneplus/sm8650 \
            -m oneplus_13r.xml \
            --depth=1
          repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags

      - name: Apply KernelSU
        working-directory: ${{ steps.build-dir.outputs.path }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          curl -fsSL "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          git submodule update --init --recursive --depth=1

      - name: Configure Kernel Options
        working-directory: ${{ steps.build-dir.outputs.path }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          # Use merge_config.sh for safer configuration
          ./scripts/config --file common/arch/arm64/configs/gki_defconfig \
            --enable CONFIG_KSU \
            --enable CONFIG_KSU_SUSFS \
            --disable CONFIG_KSU_WITH_KPROBES \
            --set-str CONFIG_LOCALVERSION "-custom-$(date +'%y%m%d')"

          # Enable LTO configurations
          sed -i '/CONFIG_LTO/d' common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LTO=y" >> common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LTO_CLANG_FULL=y" >> common/arch/arm64/configs/gki_defconfig

      - name: Build Kernel
        working-directory: ${{ steps.build-dir.outputs.path }}/kernel_platform/oneplus13r_v
        env:
          KSU_VERSION: ${{ steps.ksu-version.outputs.version }}
        run: |
          export KBUILD_BUILD_USER="GitHubActions"
          export KBUILD_BUILD_HOST="gh-runner"
          
          cd kernel_platform
          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom
      
      - name: Package Artifacts
        working-directory: ${{ steps.build-dir.outputs.path }}
        run: |
          kernel_image="kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image"
          [ -f "$kernel_image" ] || { echo "❌ Kernel image missing"; exit 1; }
          
          cp "$kernel_image" AnyKernel3/
          cd AnyKernel3
          zip_name="WildPlusKernel-OP13r-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}.zip"
          # Now includes SUSFS module files automatically
          zip -r9 "../${zip_name}" .
          echo "ZIP_PATH=${zip_name}" >> $GITHUB_ENV

        # New step added here
      - name: Download and Prepare SUSFS Module
        working-directory: ${{ steps.build-dir.outputs.path }}/AnyKernel3
        run: |
          wget -q --show-progress https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip -O susfs_module.zip
          unzip susfs_module.zip -d .
          rm susfs_module.zip
          echo "SUSFS module version: $(cat susfs_module.version)"  # If available  

      - name: Package Artifacts
        working-directory: ${{ steps.build-dir.outputs.path }}
        run: |
          kernel_image="kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image"
          [ -f "$kernel_image" ] || { echo "❌ Kernel image missing"; exit 1; }
          
          cp "$kernel_image" AnyKernel3/
          cd AnyKernel3
          zip_name="WildPlusKernel-OP13r-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}.zip"
          zip -r9 "../${zip_name}" .
          echo "ZIP_PATH=${zip_name}" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.BUILD_DIR }}
          path: ${{ steps.build-dir.outputs.path }}/${{ env.ZIP_PATH }}
